// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: v1/poi.proto

package poiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PoIService_PoI_FullMethodName       = "/api.v1.PoIService/PoI"
	PoIService_Proximity_FullMethodName = "/api.v1.PoIService/Proximity"
	PoIService_BBox_FullMethodName      = "/api.v1.PoIService/BBox"
	PoIService_Route_FullMethodName     = "/api.v1.PoIService/Route"
)

// PoIServiceClient is the client API for PoIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// see https://github.com/grpc-ecosystem/grpc-gateway
// https://github.com/googleapis/googleapis/blob/master/google/api/http.proto
type PoIServiceClient interface {
	PoI(ctx context.Context, in *PoIRequest, opts ...grpc.CallOption) (*PoIResponse, error)
	Proximity(ctx context.Context, in *ProximityRequest, opts ...grpc.CallOption) (*ProximityResponse, error)
	BBox(ctx context.Context, in *BBoxRequest, opts ...grpc.CallOption) (*BBoxResponse, error)
	Route(ctx context.Context, in *RouteRequest, opts ...grpc.CallOption) (*RouteResponse, error)
}

type poIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPoIServiceClient(cc grpc.ClientConnInterface) PoIServiceClient {
	return &poIServiceClient{cc}
}

func (c *poIServiceClient) PoI(ctx context.Context, in *PoIRequest, opts ...grpc.CallOption) (*PoIResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PoIResponse)
	err := c.cc.Invoke(ctx, PoIService_PoI_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poIServiceClient) Proximity(ctx context.Context, in *ProximityRequest, opts ...grpc.CallOption) (*ProximityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProximityResponse)
	err := c.cc.Invoke(ctx, PoIService_Proximity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poIServiceClient) BBox(ctx context.Context, in *BBoxRequest, opts ...grpc.CallOption) (*BBoxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BBoxResponse)
	err := c.cc.Invoke(ctx, PoIService_BBox_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poIServiceClient) Route(ctx context.Context, in *RouteRequest, opts ...grpc.CallOption) (*RouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RouteResponse)
	err := c.cc.Invoke(ctx, PoIService_Route_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PoIServiceServer is the server API for PoIService service.
// All implementations should embed UnimplementedPoIServiceServer
// for forward compatibility
//
// see https://github.com/grpc-ecosystem/grpc-gateway
// https://github.com/googleapis/googleapis/blob/master/google/api/http.proto
type PoIServiceServer interface {
	PoI(context.Context, *PoIRequest) (*PoIResponse, error)
	Proximity(context.Context, *ProximityRequest) (*ProximityResponse, error)
	BBox(context.Context, *BBoxRequest) (*BBoxResponse, error)
	Route(context.Context, *RouteRequest) (*RouteResponse, error)
}

// UnimplementedPoIServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPoIServiceServer struct {
}

func (UnimplementedPoIServiceServer) PoI(context.Context, *PoIRequest) (*PoIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoI not implemented")
}
func (UnimplementedPoIServiceServer) Proximity(context.Context, *ProximityRequest) (*ProximityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proximity not implemented")
}
func (UnimplementedPoIServiceServer) BBox(context.Context, *BBoxRequest) (*BBoxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BBox not implemented")
}
func (UnimplementedPoIServiceServer) Route(context.Context, *RouteRequest) (*RouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Route not implemented")
}

// UnsafePoIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PoIServiceServer will
// result in compilation errors.
type UnsafePoIServiceServer interface {
	mustEmbedUnimplementedPoIServiceServer()
}

func RegisterPoIServiceServer(s grpc.ServiceRegistrar, srv PoIServiceServer) {
	s.RegisterService(&PoIService_ServiceDesc, srv)
}

func _PoIService_PoI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoIServiceServer).PoI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoIService_PoI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoIServiceServer).PoI(ctx, req.(*PoIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoIService_Proximity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProximityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoIServiceServer).Proximity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoIService_Proximity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoIServiceServer).Proximity(ctx, req.(*ProximityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoIService_BBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BBoxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoIServiceServer).BBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoIService_BBox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoIServiceServer).BBox(ctx, req.(*BBoxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoIService_Route_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoIServiceServer).Route(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoIService_Route_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoIServiceServer).Route(ctx, req.(*RouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PoIService_ServiceDesc is the grpc.ServiceDesc for PoIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PoIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.PoIService",
	HandlerType: (*PoIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PoI",
			Handler:    _PoIService_PoI_Handler,
		},
		{
			MethodName: "Proximity",
			Handler:    _PoIService_Proximity_Handler,
		},
		{
			MethodName: "BBox",
			Handler:    _PoIService_BBox_Handler,
		},
		{
			MethodName: "Route",
			Handler:    _PoIService_Route_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/poi.proto",
}
