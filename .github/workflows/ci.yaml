name: Go APP CI
# run on push to main or on PR targeting main
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
permissions:
  id-token: write
  contents: read
  pull-requests: write
jobs:
  vuln-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23.3"
      - name: Install dependencies
        run: make ci
      - name: Vulnerability Scan
        run: make vuln_scan

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23.3"
      - name: Lint
        uses: golangci/golangci-lint-action@v6

  test:
    runs-on: ubuntu-latest
    needs:
      - vuln-scan
      - lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23.3"
      - name: Assume build role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1 # required for public ecr to pull images in tests
          role-to-assume: ${{ secrets.CI_BUILD_ROLE_ARN }}
      - name: Login to Amazon ECR Public Gallery
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public
      - name: Install dependencies
        run: make ci
      - name: Run tests
        run: make test_report
      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          badge: true
          fail_below_min: false
          format: markdown
          hide_branch_rate: true
          hide_complexity: true
          indicators: true
          output: both
          thresholds: "60 80"
      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md

  build:
    runs-on: ubuntu-latest
    needs:
      - vuln-scan
      - lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Assume build role for eu-east to get public ECR access
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1 # required for public ecr
          role-to-assume: ${{ secrets.CI_BUILD_ROLE_ARN }}
      - name: Login to Amazon ECR Public Gallery
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public
      - name: Assume build role for eu-west-1
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-1
          role-to-assume: ${{ secrets.CI_BUILD_ROLE_ARN }}
      - name: Login to private ECR
        id: login-ecr-private
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, Tag Docker image for PR
        if: github.event_name == 'pull_request'
        run: make build_tag_ci
      - name: Build, Tag, Push Docker image
        if: github.ref == 'refs/heads/main'
        run: make build_tag_push_ci

  synth:
    runs-on: ubuntu-latest
    needs:
      - vuln-scan
      - lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23.3"
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
      - name: Assume synth role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.DEFAULT_AWS_TARGET_REGION }}
          role-to-assume: ${{ secrets.CI_CDK_SYNTH_ROLE_ARN }}
      - name: Setup CDK
        run: npm install -g aws-cdk
      - name: CDK Synth
        env:
          AWS_REGION: ${{ secrets.DEFAULT_AWS_TARGET_REGION }}
          AWS_ACCOUNT: ${{ secrets.DEFAULT_TARGET_AWS_ACCOUNT_ID }}
        run: make synth_ci
